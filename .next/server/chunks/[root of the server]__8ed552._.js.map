{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":["file:///Users/bryansagbay/Documents/LoginApiUdipsai/src/utils/isValidEmails.ts"],"sourcesContent":["export function isValidEmails(email: string):boolean{\n    const emailRegex = /\\S+@\\S+\\.\\S+/;\n    return emailRegex.test(email);\n\n}"],"names":[],"mappings":";;;AAAO,SAAS,cAAc,KAAa;IACvC,MAAM,aAAa;IACnB,OAAO,WAAW,IAAI,CAAC;AAE3B"}},
    {"offset": {"line": 54, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///Users/bryansagbay/Documents/LoginApiUdipsai/src/utils/messages.ts"],"sourcesContent":["export const messages = {\n    error: {\n        needProps: 'Porfavor ingresa email, password and confirmPassword',\n        emailNotValid: 'Email no valido:',\n        isValidPassword: 'Porfavor revisa que las contraseñas coincidan',\n        emailExist: 'El usuario ya existe',\n        default: 'Algo salió mal',\n        UserNotFound: 'Usuario no encontrado',\n        incorredPassword: 'Contraseña incorrecta',\n        notAutorized: 'No autorizado',\n        PasswordNotMatch: 'Las contraseñas no coinciden',\n        tokenNotValid: 'Token no valido',\n    },\n    success: {\n        userCreated: 'Usuario creado exitosamente',\n        userLogged: 'Usuario logeado exitosamente',\n        emailSend: 'Correo enviado exitosamente',\n        passwordChanged: 'Contraseña cambiada exitosamente',\n        authorized: 'Autorizado',\n    }\n\n};"],"names":[],"mappings":";;;AAAO,MAAM,WAAW;IACpB,OAAO;QACH,WAAW;QACX,eAAe;QACf,iBAAiB;QACjB,YAAY;QACZ,SAAS;QACT,cAAc;QACd,kBAAkB;QAClB,cAAc;QACd,kBAAkB;QAClB,eAAe;IACnB;IACA,SAAS;QACL,aAAa;QACb,YAAY;QACZ,WAAW;QACX,iBAAiB;QACjB,YAAY;IAChB;AAEJ"}},
    {"offset": {"line": 84, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 114, "column": 0}, "map": {"version":3,"sources":["file:///Users/bryansagbay/Documents/LoginApiUdipsai/src/models/User.ts"],"sourcesContent":["import mongoose,{ Schema, Document, ObjectId} from \"mongoose\";\n\n\nexport interface IUser {\n    _id?: ObjectId | string | undefined;\n    email: string;\n    password: string;\n    createdAt?: Date;\n    updatedAt?: Date;\n}\n\nexport interface IUserSchema extends Document {\n    email: string;\n    password: string;\n    createdAt?: Date;\n    updatedAt?: Date;\n}\n\nconst UserSchema: Schema = new Schema(\n    {\n        email: { type: String, required: true, unique: true },\n        password: { type: String, required: true },\n    },{\n        versionKey: false,\n        timestamps: true,\n    }\n\n);\n\n\nconst User = mongoose.models.User || mongoose.model(\"User\", UserSchema)\nexport default User;"],"names":[],"mappings":";;;AAAA;;AAkBA,MAAM,aAAqB,IAAI,yGAAA,CAAA,SAAM,CACjC;IACI,OAAO;QAAE,MAAM;QAAQ,UAAU;QAAM,QAAQ;IAAK;IACpD,UAAU;QAAE,MAAM;QAAQ,UAAU;IAAK;AAC7C,GAAE;IACE,YAAY;IACZ,YAAY;AAChB;AAKJ,MAAM,OAAO,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ;uCAC7C"}},
    {"offset": {"line": 135, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 141, "column": 0}, "map": {"version":3,"sources":["file:///Users/bryansagbay/Documents/LoginApiUdipsai/src/libs/database.ts"],"sourcesContent":["import mongoose from \"mongoose\";\n\nconst MONGO_URL = \"mongodb://127.0.0.1/udipsai\";\n\nexport const connectMongoDB = async () => {\n    try {\n        await mongoose.connect(MONGO_URL);\n        console.log('Conectado a la base de datos');\n    } catch (error) {\n        console.error('Error al conectar a la base de datos:', error);\n    }\n};\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,YAAY;AAEX,MAAM,iBAAiB;IAC1B,IAAI;QACA,MAAM,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC;QACvB,QAAQ,GAAG,CAAC;IAChB,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,yCAAyC;IAC3D;AACJ"}},
    {"offset": {"line": 155, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 185, "column": 0}, "map": {"version":3,"sources":["file:///Users/bryansagbay/Documents/LoginApiUdipsai/src/app/api/auth/register/route.ts"],"sourcesContent":["import { isValidEmails } from \"@/utils/isValidEmails\";\nimport { messages } from \"@/utils/messages\";\nimport bcrypt from \"bcryptjs\";\nimport { NextRequest, NextResponse } from \"next/server\";\nimport User, {IUserSchema} from \"@/models/User\";\nimport { connectMongoDB } from \"@/libs/database\";\nimport jwt from \"jsonwebtoken\";\n\nexport async function POST(request: NextRequest){\n    try {\n        await connectMongoDB();\n        const body = await request.json();\n        const { email, password, confirmPassword } = body;\n       \n        // Verificar si los campos están vacíos\n        if(!email || !password || !confirmPassword){\n            return NextResponse.json(\n                {\n                    message: messages.error.needProps,\n                },\n                {\n                    status: 400\n                }\n            )\n        }\n\n        // Verificar el email\n        if(!isValidEmails(email)){\n            return NextResponse.json(\n                {\n                    message: messages.error.emailNotValid,\n                },\n                {\n                    status: 400\n                }\n            )\n        }\n\n        // Verificar si las contraseñas coinciden\n        if(password !== confirmPassword){\n            return NextResponse.json(\n                {\n                    message: messages.error.isValidPassword,\n                },\n                {\n                    status: 400\n                }\n            )\n        }\n        \n        const userFind = await User.findOne({email});\n    \n        if(userFind){\n            return NextResponse.json(\n                {\n                    message: messages.error.emailExist,\n                },\n                {\n                    status: 400\n                }\n            )\n        }   \n        \n        const hashPassword = await bcrypt.hash(password, 10);\n        const newUser : IUserSchema = new User({\n            email,\n            password: hashPassword,\n        });\n\n        //@ts-ignore\n        const {password: userPass, ...rest} = newUser;\n\n        await newUser.save();\n\n        // Verificamos que JWT_SECRET esté definido\n        if (!process.env.JWT_SECRET) {\n            return NextResponse.json(\n                { message: \"JWT_SECRET no está definido en las variables de entorno\" },\n                { status: 500 }\n            );\n        }\n        \n                    \n        const token = jwt.sign({ data: rest}, process.env.JWT_SECRET, {expiresIn: '24h'});\n\n        const response = NextResponse.json({\n            newUser: rest,\n            messages: messages.success.userCreated,\n        },\n        {\n            status: 200,\n        });\n\n        response.cookies.set(\"auth_cookie\", token, {\n            secure: process.env.NODE_ENV === 'production',\n            sameSite: 'strict',\n            maxAge: 86400,\n            path: '/',\n        })\n\n        return response;\n\n    }catch (error) {\n        return NextResponse.json(\n            {\n                message: messages.error.default, error\n            },\n            {\n                status: 500\n            }\n        )\n    }\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAEO,eAAe,KAAK,OAAoB;IAC3C,IAAI;QACA,MAAM,CAAA,GAAA,yHAAA,CAAA,iBAAc,AAAD;QACnB,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,eAAe,EAAE,GAAG;QAE7C,uCAAuC;QACvC,IAAG,CAAC,SAAS,CAAC,YAAY,CAAC,iBAAgB;YACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;gBACI,SAAS,0HAAA,CAAA,WAAQ,CAAC,KAAK,CAAC,SAAS;YACrC,GACA;gBACI,QAAQ;YACZ;QAER;QAEA,qBAAqB;QACrB,IAAG,CAAC,CAAA,GAAA,+HAAA,CAAA,gBAAa,AAAD,EAAE,QAAO;YACrB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;gBACI,SAAS,0HAAA,CAAA,WAAQ,CAAC,KAAK,CAAC,aAAa;YACzC,GACA;gBACI,QAAQ;YACZ;QAER;QAEA,yCAAyC;QACzC,IAAG,aAAa,iBAAgB;YAC5B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;gBACI,SAAS,0HAAA,CAAA,WAAQ,CAAC,KAAK,CAAC,eAAe;YAC3C,GACA;gBACI,QAAQ;YACZ;QAER;QAEA,MAAM,WAAW,MAAM,uHAAA,CAAA,UAAI,CAAC,OAAO,CAAC;YAAC;QAAK;QAE1C,IAAG,UAAS;YACR,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;gBACI,SAAS,0HAAA,CAAA,WAAQ,CAAC,KAAK,CAAC,UAAU;YACtC,GACA;gBACI,QAAQ;YACZ;QAER;QAEA,MAAM,eAAe,MAAM,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;QACjD,MAAM,UAAwB,IAAI,uHAAA,CAAA,UAAI,CAAC;YACnC;YACA,UAAU;QACd;QAEA,YAAY;QACZ,MAAM,EAAC,UAAU,QAAQ,EAAE,GAAG,MAAK,GAAG;QAEtC,MAAM,QAAQ,IAAI;QAElB,2CAA2C;QAC3C,IAAI,CAAC,QAAQ,GAAG,CAAC,UAAU,EAAE;YACzB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;gBAAE,SAAS;YAA0D,GACrE;gBAAE,QAAQ;YAAI;QAEtB;QAGA,MAAM,QAAQ,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC;YAAE,MAAM;QAAI,GAAG,QAAQ,GAAG,CAAC,UAAU,EAAE;YAAC,WAAW;QAAK;QAE/E,MAAM,WAAW,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAC/B,SAAS;YACT,UAAU,0HAAA,CAAA,WAAQ,CAAC,OAAO,CAAC,WAAW;QAC1C,GACA;YACI,QAAQ;QACZ;QAEA,SAAS,OAAO,CAAC,GAAG,CAAC,eAAe,OAAO;YACvC,QAAQ,oDAAyB;YACjC,UAAU;YACV,QAAQ;YACR,MAAM;QACV;QAEA,OAAO;IAEX,EAAC,OAAO,OAAO;QACX,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;YACI,SAAS,0HAAA,CAAA,WAAQ,CAAC,KAAK,CAAC,OAAO;YAAE;QACrC,GACA;YACI,QAAQ;QACZ;IAER;AACJ"}},
    {"offset": {"line": 284, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}