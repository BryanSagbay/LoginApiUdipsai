{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/bryansagbay/Documents/nextjs-flutter-login-api/src/libs/database.ts"],"sourcesContent":["import mongoose from \"mongoose\";\n\n\nconst MONGO_URL = \"mongodb://127.0.0.1/udipsai\";\n\nexport const connectMongoDB = async () => {\n    try {\n        await mongoose.connect(MONGO_URL);\n        console.log('Conectado a la base de datos');\n    } catch (error) {\n        console.error('Error al conectar a la base de datos:', error);\n    }\n};\n"],"names":[],"mappings":";;;AAAA;;AAGA,MAAM,YAAY;AAEX,MAAM,iBAAiB;IAC1B,IAAI;QACA,MAAM,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC;QACvB,QAAQ,GAAG,CAAC;IAChB,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,yCAAyC;IAC3D;AACJ"}},
    {"offset": {"line": 69, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 75, "column": 0}, "map": {"version":3,"sources":["file:///Users/bryansagbay/Documents/nextjs-flutter-login-api/src/models/User.ts"],"sourcesContent":["import mongoose,{ Schema, Document, ObjectId} from \"mongoose\";\n\n\nexport interface IUser {\n    _id?: ObjectId | string | undefined;\n    email: string;\n    password: string;\n    createdAt?: Date;\n    updatedAt?: Date;\n}\n\nexport interface IUserSchema extends Document {\n    email: string;\n    password: string;\n    createdAt?: Date;\n    updatedAt?: Date;\n}\n\nconst UserSchema: Schema = new Schema(\n    {\n        email: { type: String, required: true, unique: true },\n        password: { type: String, required: true },\n    },{\n        versionKey: false,\n        timestamps: true,\n    }\n\n);\n\n\nconst User = mongoose.models.User || mongoose.model(\"User\", UserSchema)\nexport default User;"],"names":[],"mappings":";;;AAAA;;AAkBA,MAAM,aAAqB,IAAI,yGAAA,CAAA,SAAM,CACjC;IACI,OAAO;QAAE,MAAM;QAAQ,UAAU;QAAM,QAAQ;IAAK;IACpD,UAAU;QAAE,MAAM;QAAQ,UAAU;IAAK;AAC7C,GAAE;IACE,YAAY;IACZ,YAAY;AAChB;AAKJ,MAAM,OAAO,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ;uCAC7C"}},
    {"offset": {"line": 96, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 102, "column": 0}, "map": {"version":3,"sources":["file:///Users/bryansagbay/Documents/nextjs-flutter-login-api/src/utils/messages.ts"],"sourcesContent":["export const messages = {\n    error: {\n        needProps: 'Porfavor ingresa email, password and confirmPassword',\n        emailNotValid: 'Email no valido:',\n        isValidPassword: 'Porfavor revisa que las contrase침as coincidan',\n        emailExist: 'El usuario ya existe',\n        default: 'Algo sali칩 mal',\n        UserNotFound: 'Usuario no encontrado',\n        incorredPassword: 'Contrase침a incorrecta',\n    },\n    success: {\n        userCreated: 'Usuario creado exitosamente',\n        userLogged: 'Usuario logeado exitosamente',\n    }\n\n};"],"names":[],"mappings":";;;AAAO,MAAM,WAAW;IACpB,OAAO;QACH,WAAW;QACX,eAAe;QACf,iBAAiB;QACjB,YAAY;QACZ,SAAS;QACT,cAAc;QACd,kBAAkB;IACtB;IACA,SAAS;QACL,aAAa;QACb,YAAY;IAChB;AAEJ"}},
    {"offset": {"line": 120, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 166, "column": 0}, "map": {"version":3,"sources":["file:///Users/bryansagbay/Documents/nextjs-flutter-login-api/src/app/api/auth/login/route.ts"],"sourcesContent":["import { connectMongoDB } from \"@/libs/database\";\nimport User, { IUser } from \"@/models/User\";\nimport { messages } from \"@/utils/messages\";\nimport bcrypt from \"bcryptjs\";\nimport { NextRequest, NextResponse } from \"next/server\";\nimport jwt from \"jsonwebtoken\";\n\nexport async function POST(request: NextRequest) {\n\n    try{\n\n        await connectMongoDB();\n\n        const body: IUser = await request.json();\n        const {email, password} = body;\n\n        //Validamos que los campos no esten vacios\n        if(!email || !password){\n            return NextResponse.json(\n            {\n                messages: messages.error.needProps\n            },\n            {\n                status: 400\n            }\n            )\n        }\n\n        const UserFind = await User.findOne({email});\n\n        // Validamos que el usuario exista\n        if(!UserFind){\n            return NextResponse.json(\n            {\n                messages: messages.error.UserNotFound\n            },\n            {\n                status: 400\n            }\n            )\n        }\n\n        const isCorret: boolean = await bcrypt.compare(password, UserFind.password);\n\n        // Validamos que la contrase침a sea correcta\n        if(!isCorret){\n            return NextResponse.json(\n            {\n                messages: messages.error.incorredPassword\n            },\n            {\n                status: 400\n            }\n            )\n        }\n\n        // @ts-ignore\n        const { password: userPass, ...rest} = UserFind._doc;\n\n        const token = jwt.sign({data: rest}, 'secreto', {expiresIn: 86400});\n        \n        const response = NextResponse.json(\n            { userLogged: rest, messages: messages.success.userLogged, token },\n            { status: 200 }\n        );\n        response.cookies.set(\"auth_cookie\", token, {\n            secure: process.env.NODE_ENV === \"production\",\n            sameSite: \"strict\",\n            maxAge: 86400,\n            path: \"/\",\n        });\n\n        return response;\n\n    } catch (error) {\n        return NextResponse.json(\n            { messages: messages.error.default, error},\n            { status: 500 }\n        );\n    }\n\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEO,eAAe,KAAK,OAAoB;IAE3C,IAAG;QAEC,MAAM,CAAA,GAAA,yHAAA,CAAA,iBAAc,AAAD;QAEnB,MAAM,OAAc,MAAM,QAAQ,IAAI;QACtC,MAAM,EAAC,KAAK,EAAE,QAAQ,EAAC,GAAG;QAE1B,0CAA0C;QAC1C,IAAG,CAAC,SAAS,CAAC,UAAS;YACnB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACxB;gBACI,UAAU,0HAAA,CAAA,WAAQ,CAAC,KAAK,CAAC,SAAS;YACtC,GACA;gBACI,QAAQ;YACZ;QAEJ;QAEA,MAAM,WAAW,MAAM,uHAAA,CAAA,UAAI,CAAC,OAAO,CAAC;YAAC;QAAK;QAE1C,kCAAkC;QAClC,IAAG,CAAC,UAAS;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACxB;gBACI,UAAU,0HAAA,CAAA,WAAQ,CAAC,KAAK,CAAC,YAAY;YACzC,GACA;gBACI,QAAQ;YACZ;QAEJ;QAEA,MAAM,WAAoB,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU,SAAS,QAAQ;QAE1E,2CAA2C;QAC3C,IAAG,CAAC,UAAS;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACxB;gBACI,UAAU,0HAAA,CAAA,WAAQ,CAAC,KAAK,CAAC,gBAAgB;YAC7C,GACA;gBACI,QAAQ;YACZ;QAEJ;QAEA,aAAa;QACb,MAAM,EAAE,UAAU,QAAQ,EAAE,GAAG,MAAK,GAAG,SAAS,IAAI;QAEpD,MAAM,QAAQ,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC;YAAC,MAAM;QAAI,GAAG,WAAW;YAAC,WAAW;QAAK;QAEjE,MAAM,WAAW,gIAAA,CAAA,eAAY,CAAC,IAAI,CAC9B;YAAE,YAAY;YAAM,UAAU,0HAAA,CAAA,WAAQ,CAAC,OAAO,CAAC,UAAU;YAAE;QAAM,GACjE;YAAE,QAAQ;QAAI;QAElB,SAAS,OAAO,CAAC,GAAG,CAAC,eAAe,OAAO;YACvC,QAAQ,oDAAyB;YACjC,UAAU;YACV,QAAQ;YACR,MAAM;QACV;QAEA,OAAO;IAEX,EAAE,OAAO,OAAO;QACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;YAAE,UAAU,0HAAA,CAAA,WAAQ,CAAC,KAAK,CAAC,OAAO;YAAE;QAAK,GACzC;YAAE,QAAQ;QAAI;IAEtB;AAEJ"}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}